services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: marketplace_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-marketplace}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - marketplace_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: marketplace_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketplace_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Application
  app:
    build: .
    container_name: marketplace_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-marketplace}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # Application Configuration
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: ${DEBUG:-false}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: logs/app.log
      
      # Email Configuration
      EMAIL_NOTIFICATIONS_DIR: email_notifications
      
      # Payment Configuration
      PAYMENT_FAILURE_RATE: ${PAYMENT_FAILURE_RATE:-0.1}
      
      # Rate Limiting Configuration
      LOGIN_RATE_LIMIT: ${LOGIN_RATE_LIMIT:-5/hour}
      BOOKING_RATE_LIMIT: ${BOOKING_RATE_LIMIT:-20/hour}
      BROWSING_RATE_LIMIT: ${BROWSING_RATE_LIMIT:-100/hour}
    volumes:
      - ./logs:/app/logs
      - ./email_notifications:/app/email_notifications
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - marketplace_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  marketplace_network:
    driver: bridge
